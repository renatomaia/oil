# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================

LUA_HOME= /usr/local
LUA_INC= $(LUA_HOME)/include
LUA_LIB= $(LUA_HOME)/lib
LUA_BIN= $(LUA_HOME)/bin

# Where to install. The installation starts in the src directory, so take care
# if INSTALL_TOP is not an absolute path. (Man pages are installed from the
# doc directory.)
#
INSTALL_TOP= $(LUA_HOME)
INSTALL_BIN= $(INSTALL_TOP)/bin
INSTALL_INC= $(INSTALL_TOP)/include
INSTALL_LIB= $(INSTALL_TOP)/lib
INSTALL_LMOD= $(INSTALL_TOP)/share/lua/5.1
INSTALL_CMOD= $(INSTALL_TOP)/lib/lua/5.1

# How to install. You may prefer "install" instead of "cp" if you have it.
# To remove debug information from binaries, use "install -s" in INSTALL_EXEC.
#
INSTALL_EXEC= cp -r
INSTALL_DATA= cp -r
INSTALL_COPY= ln -fs

# Add any necessary compilation flags.
#
MYCFLAGS=
MYLDFLAGS=

# If the lua_Number of your Lua compilation can store casted values of
# 'long long', 'unsigned long long' and 'long double' then you can uncomment the
# following line to add support for CORBA large numeric types.
#
#MYCFLAGS+= -DLARGE_NUMBERS

# == END OF USER SETTINGS. NO NEED TO CHANGE ANYTHING BELOW THIS LINE =========

# Your platform. See PLATS for possible values.
PLAT= none

# Convenience platforms targets.
PLATS= linux solaris macosx

CC= gcc
CFLAGS= -O2 -Wall -I$(LUA_INC) $(MYCFLAGS)
LDFLAGS= -L$(LUA_LIB) $(MYLDFLAGS)
AR= ar rcu
RANLIB= ranlib
RM= rm -f
LIBS= -lm -ldl -llua $(MYLIBS)

LUA= $(LUA_BIN)/lua -epackage.path=[[../lua/?.lua]]

# Flags for pre-compilation of Lua scripts
PC_FLAGS= -l "../lua/?.lua"
# Flags for generation of pre-loader of Lua scripts
PL_FLAGS= -p OILALL_API

LIBPFX= lualib

LUASOCKET= luasocket
OILBIT= oilbit
OILALL= oilall

vLOOP= 2.3
vLIDL= 1.0.5
vSOCK= 2.0.2
vOIL=  0.5

CLIBS= $(LUASOCKET).$(vSOCK) \
       $(OILBIT).$(vOIL)
LLIBS= loop.$(vLOOP) \
       luaidl.$(vLIDL) \
       socket.$(vSOCK) \
       oil.$(vOIL)

modname = $(basename $(basename $(basename $(1))))

CMODS= $(foreach lib,$(CLIBS),$(call modname,$(lib)))
LMODS= $(foreach lib,$(LLIBS),$(call modname,$(lib)))

TOLUA= $(addsuffix .lua, $(filter-out loop,$(LMODS))) $(LMODS)
TOINC= $(addsuffix .h , $(CMODS))
TOLIB= $(addsuffix .a , $(addprefix lib, $(CMODS)))
TOSOL= $(addsuffix .so, $(addprefix lib, $(CLIBS)))

PCMOD= $(addprefix $(LIBPFX),$(LMODS))
PCINC= $(addsuffix .h , $(PCMOD))
PCLIB= $(addsuffix .a , $(addprefix lib, $(PCMOD)))
PCSOL= $(addsuffix .so, $(addprefix lib$(LIBPFX), $(LLIBS)))

PLINC= $(OILALL).h
PLLIB= lib$(OILALL).a
PLSOL= lib$(OILALL).$(vOIL).so
