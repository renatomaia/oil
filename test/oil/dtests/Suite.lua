local Suite = require "loop.test.Suite"

return Suite{
	AttributeAccess = require "oil.dtests.kernel.AttributeAccess",
	MethodInvocation = require "oil.dtests.kernel.MethodInvocation",
	CallbackInvocation = require "oil.dtests.kernel.CallbackInvocation",
	CallbackAsyncInvocation = require "oil.dtests.kernel.CallbackAsyncInvocation",
	ExceptionCatch = require "oil.dtests.kernel.ExceptionCatch",
	ORBShutdown = require "oil.dtests.kernel.ORBShutdown",
	ORBShutdown2 = require "oil.dtests.kernel.ORBShutdown2",
	ORBRestart = require "oil.dtests.kernel.ORBRestart",
	ServantLocator = require "oil.dtests.kernel.ServantLocator",
	ServantManager = require "oil.dtests.kernel.ServantManager",
	AsyncResultsProbe = require "oil.dtests.kernel.AsyncResultsProbe",
	LocalReference = require "oil.dtests.kernel.LocalReference",
	LocalRef2Servant = require "oil.dtests.kernel.LocalRef2Servant",
	LocalRef2Proxy = require "oil.dtests.kernel.LocalRef2Proxy",
	CORBA = Suite{
		IDLChanges = require "oil.dtests.corba.IDLChanges",
		ServantCreation = require "oil.dtests.corba.ServantCreation",
		ObjectOperations = require "oil.dtests.corba.ObjectOperations",
		NonExistentErrors = require "oil.dtests.corba.NonExistentErrors",
		InterceptedGIOP = Suite{
			InvocationCallInfo = require "oil.dtests.corba.intercepted.InvocationInfo",
			ServerExceptionInfo = require "oil.dtests.corba.intercepted.ServerExceptionInfo",
			ClientExceptionInfo = require "oil.dtests.corba.intercepted.ClientExceptionInfo",
			RequestWithServiceContext = require "oil.dtests.corba.intercepted.RequestWithServiceContext",
			ReplyWithServiceContext = require "oil.dtests.corba.intercepted.ReplyWithServiceContext",
			ClientCancelWithResults = require "oil.dtests.corba.intercepted.ClientCancelWithResults",
			ClientCancelWithException = require "oil.dtests.corba.intercepted.ClientCancelWithException",
			ServerCancelWithResults = require "oil.dtests.corba.intercepted.ServerCancelWithResults",
			ServerCancelWithException = require "oil.dtests.corba.intercepted.ServerCancelWithException",
			ServerCancelWithServiceContext = require "oil.dtests.corba.intercepted.ServerCancelWithServiceContext",
			ClientForwardRequest = require "oil.dtests.corba.intercepted.ClientForwardRequest",
			ClientForwardReply = require "oil.dtests.corba.intercepted.ClientForwardReply",
			ServerForwardRequest = require "oil.dtests.corba.intercepted.ServerForwardRequest",
			ServerForwardReply = require "oil.dtests.corba.intercepted.ServerForwardReply",
			ErrorInSendRequest = require "oil.dtests.corba.intercepted.ErrorInSendRequest",
			ErrorInReceiveReply = require "oil.dtests.corba.intercepted.ErrorInReceiveReply",
			ErrorInReceiveRequest = require "oil.dtests.corba.intercepted.ErrorInReceiveRequest",
			ErrorInSendReply = require "oil.dtests.corba.intercepted.ErrorInSendReply",
		},
	},
}
