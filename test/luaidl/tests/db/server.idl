module MPA {
	
	// General -- TODO: may be replaced by CCM supported features
	
	typedef long ObserverSubscription;
	
	// Types
	
	typedef string ValueTypeID;
	typedef sequence<ValueTypeID> ValueTypeIDSeq;
	
	struct TypedName {
		ValueTypeID type;
		string name;
	};
	typedef sequence<TypedName> TypedNameSeq;
	
	// Values
	
	typedef string InstanceID;
	
	//enum TypeKind { NIL, BOOL, INT, REAL, TEXT, OBJ };
	//
	//union TypedValue switch(TypeKind) {
	//	case BOOL: boolean    bool_val;
	//	case INT : long       real_val;
	//	case REAL: double     int_val;
	//	case TEXT: string     text_val;
	//	case OBJ : InstanceID obj_val;
	//};
	//typedef sequence<TypedValue> TypedValueSeq;
	
	typedef sequence<any> ValueSeq;
	
	module PreConfig {
		
		/*
		 * Enviro da pré-configuração da aplicação e futuramente
		 * manipulação da pré-configuração como obter informações e
		 * remover classes e funções.
		 */
		
		// Auxiliary Functions
		
		typedef string FunctionID;
		typedef string Implementation;
		
		struct FunctionDescription {
			FunctionID id;
			string name;
			string description;
			TypedNameSeq parameters;
			TypedNameSeq results;
			Implementation code;
		};
		typedef sequence<FunctionDescription> FunctionDescriptionSeq;
		
		// Object Classes
		
		typedef string MemberID;
		
		typedef string AccessMode;
		
		struct AttributeDescription {
			MemberID id;
			string name;
			string description;
			ValueTypeID type;
			AccessMode access;
		};
		typedef sequence<AttributeDescription> AttributeDescriptionSeq;
		
		struct MethodDescription {
			MemberID id;
			string name;
			string description;
			TypedNameSeq parameters;
			TypedNameSeq results;
			Implementation code;
		};
		typedef sequence<MethodDescription> MethodDescriptionSeq;
		
		struct ClassDescription {
			ValueTypeID id;
			string name;
			string description;
			ValueTypeIDSeq bases;
			AttributeDescriptionSeq attributes;
			MethodDescriptionSeq methods;
			Implementation code;
		};
		typedef sequence<ClassDescription> ClassDescriptionSeq;
		
		// Pre-Configuration
		
		exception FunctionAlreadyExists { FunctionID func; };
		exception FunctionNotFound { FunctionID func; };
		exception FunctionInUse { FunctionID func; };
		exception TypeAlreadyExists { ValueTypeID type; };
		exception TypeNotFound { ValueTypeID type; };
		exception TypeInUse { ValueTypeID type; };
		exception BadBaseType {
			ValueTypeID type;
			ValueTypeID base;
		};
		exception BadCodeImpl {
			string scope;
			string message;
		};
		exception BadFunctionImpl {
			FunctionID func;
			string message;
		};
		exception BadMethodImpl {
			ValueTypeID class;
			MemberID member;
			string message;
		};
		
		interface PreConfigurator {
			void loadConfiguration(in ClassDescriptionSeq classes,
			                       in FunctionDescriptionSeq functions,
			                       in Implementation code,
			                       in boolean force)
				raises (TypeNotFound,
				        BadBaseType, BadCodeImpl, BadFunctionImpl, BadMethodImpl,
				        FunctionAlreadyExists, TypeAlreadyExists,
				        FunctionInUse, TypeInUse);
			
			void clearConfiguration() raises (FunctionInUse, TypeInUse);
		};
	};
};

module MPA {
	
	module Plant {
		
		/*
		 * Enviro da configuração da planta da aplicação e
		 * futuramente manipulação da planta configurada como
		 * obter informações e remover equipamentos e pontos.
		 */
		
		// Plant Equipment/Point Instances
		
		struct InstanceDescription {
			InstanceID id;
			ValueSeq attributes;
		};
		struct ClassInstancesDescription {
			ValueTypeID class;
			sequence<InstanceDescription> values;
		};
		typedef sequence<ClassInstancesDescription> ClassInstancesDescriptionSeq;
		
		// Exceptions
		
		exception PlantInUse {};
		exception InstanceAlreadyExists {
			InstanceID id;
			ValueTypeID class;
		};
		exception BadInstance {
			InstanceID id;
			ValueTypeID class;
			PreConfig::MemberID member;
		};
		
		// Plant Management
		
		interface PlantConfigurator {
			void loadPlant(in ClassInstancesDescriptionSeq instances,
			               in boolean force)
				raises (PreConfig::TypeNotFound,
				        BadInstance, InstanceAlreadyExists, PlantInUse);
			void clearPlant() raises (PlantInUse);
		};
	
	};
	
};

module MPA {
	
	module Monitor {
		interface StateStreamer;
	};
	
	module Flows {
		
		/*
		 * Enviro da configuração de fluxos da aplicação e
		 * futuramente manipulação dos fluxos configurados como obter informações
		 * sobre suas estruturas (isso atualmente é possível através da operação
		 * MPA::Flows::ControlFlow::describe), alterar sua estrutura e
		 * removê-los.
		 */
		
		// Actions
		
		typedef string FlowID;
		typedef string MemberOpID;
		
		typedef string Expression;
		typedef string Variable;
		
		typedef sequence<Expression> ExpressionSeq;
		typedef sequence<Variable> VariableSeq;
		
		enum FlowOpID { call, execute, stop };
		
		struct ExpressionDescription {
			ExpressionSeq expressions;
			VariableSeq variables;
		};
		struct FunctionCallDescription {
			PreConfig::FunctionID functionid;
			ExpressionSeq expressions;
			VariableSeq variables;
		};
		struct FlowCallDescription {
			FlowID flowid;
			FlowOpID operation;
			ExpressionSeq expressions;
			VariableSeq variables;
		};
		struct ObjectCallDescription {
			Variable objname;
			PreConfig::MemberID member;
			MemberOpID operation;
			ExpressionSeq expressions;
			VariableSeq variables;
		};
		struct ClassIterationDescription {
			ValueTypeID classid;
			Variable variable;
		};
		
		enum ActionType { EXPRESSION, FUNCTIONCALL, FLOWCALL, OBJECTCALL };
		
		union ActionDescription switch (ActionType) {
			case EXPRESSION    : ExpressionDescription   expression_val;
			case FUNCTIONCALL  : FunctionCallDescription functioncall_val;
			case FLOWCALL      : FlowCallDescription     flowcall_val;
			case OBJECTCALL    : ObjectCallDescription   objectcall_val;
		};
		
		// Building Blocks
		
		typedef long ElementID;
		typedef sequence<ElementID> ElementIDSeq;
		
		struct CommandDescription {
			ActionDescription action;
			Expression before;
			Expression after;
			ElementID next;
		};
		struct ChoiceDescription {
			ActionDescription action;
			Expression before;
			Expression after;
			ElementID success;
			ElementID failure;
		};
		struct ForeachDescription {
			ClassIterationDescription action;
			ElementID iteration;
			ElementID next;
		};
		struct ForkDescription {
			ElementIDSeq paths;
			ElementIDSeq waits;
			ElementID sync;
		};
		struct SyncDescription {
			ElementID next;
		};
		
		enum BlockType { COMMAND, CHOOSE, FOREACH, FORK, WAIT };
		
		union BlockDescription switch (BlockType) {
			case COMMAND: CommandDescription command_val;
			case CHOOSE : ChoiceDescription  choice_val;
			case FOREACH: ForeachDescription foreach_val;
			case FORK   : ForkDescription    fork_val;
			case WAIT   : SyncDescription    sync_val;
		};
		typedef sequence<BlockDescription> BlockDescriptionSeq;
		
		// Flows
		
		struct VariableInit {
			Variable name;
			ValueTypeID type;
			any value;
		};
		typedef sequence<VariableInit> VariableInitSeq;
		
		
		struct FlowDescription {
			FlowID id;
			string name;
			string description;
			boolean isApplication;
			VariableInitSeq globals;
			TypedNameSeq parameters;
			TypedNameSeq results;
			PreConfig::FunctionID errorFunction;
			FlowID haltFlow;
			ElementID start;
			BlockDescriptionSeq elements;
		};
		typedef sequence<FlowDescription> FlowDescriptionSeq;
		
		exception FlowInUse { FlowID flow; };
		
		enum FlowStatus { executing, stopped, suspended };
		
		interface ControlFlow {
			readonly attribute FlowID id;
			attribute string name;
			attribute string description;
			readonly attribute boolean isApplication;
			attribute FlowStatus status;
			
			readonly attribute long threads;
			
			FlowDescription describe();
			
			void remove(in boolean force) raises (FlowInUse);
		};
		
		/*
		 * Controle da execução dos fluxos-aplicação
		 * NOTA: 'fluxos-aplicação' só permitem uma única execução e podem ser
		 * iniciados, suspendidos, interrompidos e monitorados pelo usuário.
		 * Os demais só são chamados e monitorados a partir dos fluxos-aplicação.
		 */
		
		exception IsStopped {};
		
		struct ThreadFilter {
			Flows::Variable variable;
			any value;
		};
		typedef sequence<ThreadFilter> ThreadFilterSeq;
		
		enum MonitorKind { none, errors, followup, blocks, all };
		
		struct AppicationMonitoring {
			MonitorKind kind;
			ThreadFilterSeq filters;
		};
		
		interface FlowApplication : ControlFlow {
			
			boolean start();
			boolean stop();
			boolean pause() raises (IsStopped);
			
			void monitor(in Monitor::StateStreamer streamer,
			             in AppicationMonitoring monitoring);
		};
		
		// Flow Configurator
		
		exception FlowAlreadyExists { FlowID flow; };
		exception FlowNotFound { FlowID flow; };
		exception WrongFlowType { FlowID flow; };
		exception BadPlantElement {
			InstanceID id;
			ValueTypeID class;
		};
		exception BadFlowElement {
			FlowID flow;
			BlockDescription element;
			string message;
		};
		
		struct RegisteredFlow {
			FlowID id;
			string name;
			string description;
			boolean isApplication;
			long threads;
			FlowStatus status;
			string creation;
			
			ControlFlow flow;
		};
		typedef sequence<RegisteredFlow> RegisteredFlowSeq;
		
		interface FlowsObserver {
			enum FlowChangeStatus { loaded, removed };
			
			union ObservedFlow switch(FlowChangeStatus) {
				case loaded : RegisteredFlow loadedflow;
				case removed: FlowID removedflow;
			};
			typedef sequence<ObservedFlow> ObservedFlowSeq;
			
			void notify(in ObservedFlowSeq changes);
		};
		
		interface FlowConfigurator {
			void loadFlows(in FlowDescriptionSeq flows, in boolean force)
				raises (FlowAlreadyExists, FlowInUse, FlowNotFound,
				        WrongFlowType, BadFlowElement, BadPlantElement,
				        PreConfig::FunctionNotFound, PreConfig::TypeNotFound);
			void clearFlows() raises (FlowInUse);
			RegisteredFlowSeq describeFlows();
			
			ObserverSubscription subscribeObserver(in FlowsObserver observer);
			FlowsObserver unsubscribeObserver(in ObserverSubscription subscriptionid);
		};
		
	};
	
};

module MPA {
	
	module Monitor {
		
		/*
		 * Controle da monitoração de execução dos fluxos-aplicação, em particular
		 *  a criação do stream de eventos de execução. A idéia é codificar as
		 * cada mensagem de monitoramento enviadas pelo stream (seqüência de bytes
		 * emviados por UDP) as estruturas MPA::Monitor::StateStreamData
		 */
		
		// Application State Snapshot
		
		typedef string ThreadID;
		
		struct VariableSnapshot {
			Flows::Variable variable;
			any value;
		};
		typedef sequence<VariableSnapshot> VariableSnapshotSeq;
		
		// Application State Stream
		
		typedef string TimeStamp;
		
		/*
		 * NOTA: [ Sobre o campo StateStreamData::nsgno ]
		 * 
		 * O contador de mensagens é usado para identificar lacunas no
		 * acompanhamento que podem tanto ser causadas por atrasos no servidor ou
		 * por perdas de mensagem da rede. O contador é circular, portanto é
		 * necessário definir um timeout no cliente que assume a perda de
		 * mensagens caso não receba dados do stream por muito tempo (e.g. 1
		 * min.). Sempre que uma lacuna for identificada pelo cliente, ele envia
		 * pelo stream uma notificação de forma que o servidor se encarrega de
		 * que em algum monento no futuro uma mensagem de cada thread será
		 * enviada com o campo 'changes' contendo todo o estado corrente da
		 * thread. Essa é a mesma abordagem usada para inicializar o stream.
		 * 
		 * O estado global pode ser enviado logo na primeira mensagem após o
		 * recebimento da notificação de lacuna enviada pelo cliente. Mas é
		 * preciso proibirmos que hajam variáveis globais e locais com o mesmo
		 * nome numa thread, o que eu acho particularmente saudável de fazermos
		 * na compilação. Isso tiraria a exigência do cliente de definir se uma
		 * atribuição deve ser feita numa variável local ou global, pois não
		 * haveria colisão de nomes.
		 */
		struct ExecutionStateData {
			string kind;
			unsigned long msgno;         // contador de mensagens (ver nota acima);
			TimeStamp time;              // data e hora da execução;
			ThreadID thread;             // id da thread da execução sendo notificada;
			Flows::FlowID flow;          // id do fluxo que foi executado pelo thread;
			Flows::ElementID element;    // id do elemento do fluxo que foi executado;
			VariableSnapshotSeq changes; // pares indicando as variáveis alteradas;
		};
		typedef sequence<ExecutionStateData> ExecutionStateDataSeq;
		
		// Application Monitoring Manager
		
		interface ExecutionObserver {
			void notify(in ExecutionStateDataSeq info);
		};
		
		interface StateStreamer {
			oneway void dispose();
		};
		
		exception PointAccessError {
			string tag;
			string error;
		};
		
		exception AttributeAccessError {
			ValueTypeID class;
			InstanceID equipment;
			PreConfig::MemberID member;
			string error;
		};
		
		interface ApplicationMonitor {
			typedef sequence<any> ValueBlock;
			typedef sequence<string> TagBlock;
			
			StateStreamer createStateStreamer(in ExecutionObserver observer);
			
			// Point Access
			any getPointValue(in string tag) raises (PointAccessError);
			void setPointValue(in string tag, in any value) raises (PointAccessError);
			
			ValueBlock readPointBlock(in TagBlock tag)
				raises (PointAccessError);
			void writePointBlock(in TagBlock tag, in ValueBlock value)
				raises (PointAccessError);
			
			// Attribute Access
			any getAttributeValue(in ValueTypeID classid,
			                      in InstanceID equipid,
			                      in PreConfig::MemberID attribid)
				raises (AttributeAccessError);
			void setAttributeValue(in ValueTypeID classid,
			                       in InstanceID equipid,
			                       in PreConfig::MemberID attribid,
			                       in any value)
				raises (AttributeAccessError);
		};
		
	};
	
};

module MPA {
	
	module Server {
		
		interface ServerManager {
			void reset();
			void shutdown(in long timeout);
			
			readonly attribute PreConfig::PreConfigurator  config;
			readonly attribute Plant::PlantConfigurator    plant;
			readonly attribute Flows::FlowConfigurator     flows;
			readonly attribute Monitor::ApplicationMonitor monitor;
		};
		
	};

};

//module MPA {
//	component ExecutionServer{
//		provides PreConfig::PreConfigurator config;
//		provides Plant::PlantConfigurator   plant;
//		provides Flows::FlowConfigurator    flows;
//		provides Server::ServerManager      manager;
//	};
//};
 
